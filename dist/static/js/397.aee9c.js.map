{"version":3,"sources":["webpack://live/./src/core/httpClient.ts","webpack://live/./src/core/http.ts","webpack://live/./src/pages/hello/index.tsx"],"names":["SUCCESS_CODE","HTTPClient","config","successCode","defaultConfig","baseURL","this","axios","requestConfig","resolve","params","response","instance","request","get","delete","post","put","patch","Index","useState","value","setValue","onget","http","onException","style","textAlign","paddingTop","onClick","type","onInput","element","event"],"mappings":"wyBAEA,IAAMA,EAAN,IASaC,EAAb,WAKE,aAA0F,IAA9EC,EAA8E,uDAAjD,GAAIC,EAA6C,uDAAdH,GAAc,0EAF3DA,GAG7B,IAAMI,EAAoC,CAAEC,QAAS,QACrDC,KAAA,SAAgBC,qBAAhB,IACAD,KAAA,0BACAA,KAAA,cATJ,sDAYE,WAEEA,KAAA,mCAAuC,mBAAiB,UAAY,YAClE,IAAME,EAAgB,EAAH,GAD4D,GAM/EC,EAAQ,EAAD,YAELC,OAAQ,EAAF,GACDR,EADC,iBAOVI,KAAA,oCAAwC,mBAA6BK,EAA7B,UA7B5C,qBA4CE,YACE,OAAOL,KAAKM,SAASC,QAArB,KA7CJ,iBAgDE,cACE,OAAOP,KAAKM,SAASE,IAAd,EAAP,KAjDJ,kBAoDE,cACE,OAAOR,KAAKM,SAASE,IAAd,EAAP,KArDJ,oBAwDE,cACE,OAAOR,KAAKM,SAASG,OAAd,EAAP,KAzDJ,kBA4DE,gBACE,OAAOT,KAAKM,SAASI,KAAd,IAAP,KA7DJ,iBAgEE,gBACE,OAAOV,KAAKM,SAASK,IAAd,IAAP,KAjEJ,mBAoEE,gBACE,OAAOX,KAAKM,SAASM,MAAd,IAAP,OArEJ,KCEA,GDuEoB,IAAb,EC9EuB,IAAIjB,EAChC,CAAEI,QAHJ,wCAEO,QAOP,IAAmBJ,EAAW,KCFf,SAASkB,IACtB,OAA0BC,cAA1B,mBAAOC,EAAP,KAAcC,EAAd,EAD8B,GAMxBC,EAAK,mCAAG,8FACMC,MADN,yEAAH,qDAKLC,EAAW,mCAAG,8FACAD,yBADA,6DAAH,qDAOjB,OACE,uBAAKE,MAAO,CAAEC,UAAF,SAAuBC,WAAY,SAC7C,0BAAQC,QAASN,GADnB,OAGE,qBAHF,MAIE,yBACEO,KADF,OAEET,MAFF,EAGEU,QAAS,YACP,IAAMC,EAAWC,EAAD,OAAhB,MACAX,QAGJ,0BAAQO,QAASJ,GAbrB","file":"static/js/397.aee9c.js","sourcesContent":["import axios, { AxiosRequestConfig, AxiosInstance, AxiosResponse } from 'axios'\n\nconst SUCCESS_CODE = 200\n\nexport interface Response<T> {\n  code: number\n  data: T\n  msg: string\n  server_date?: Date\n}\n\nexport class HTTPClient {\n  instance: AxiosInstance;\n\n  successCode: string | number = SUCCESS_CODE\n\n  constructor(config: AxiosRequestConfig = {}, successCode: string | number = SUCCESS_CODE) {\n    const defaultConfig: AxiosRequestConfig = { baseURL: '/api' }\n    this.instance = axios.create({ ...defaultConfig, ...config })\n    this.setupCommonInterceptors()\n    this.successCode = successCode\n  }\n\n  setupCommonInterceptors() {\n    // 请求劫持\n    this.instance.interceptors.request.use((config: any) => new Promise((resolve) => {\n      const requestConfig = {\n        ...config,\n      }\n      // 向所有的请求中加入 token 参数\n      // let token = window.session.userInfo?.accessToken\n      resolve({\n        ...requestConfig,\n        params: {\n          ...config.params,\n          // token,\n        },\n      })\n    }))\n    // 响应劫持\n    this.instance.interceptors.response.use((response: AxiosResponse) => response.data)\n    // const { data, headers } = response\n    // if (data.code !== this.successCode) {\n    //   return Promise.reject(response)\n    // }\n    // const { date } = headers\n    // if (isNaN(new Date(date).getTime())) {\n    //   return {\n    //     ...response.data,\n    //     server_date: new Date()\n    //   }\n    // }\n    // response.data)\n  }\n\n  request<T>(config: AxiosRequestConfig) {\n    return this.instance.request<T, Response<T>>(config)\n  }\n\n  get<T>(url: string, config?: AxiosRequestConfig) {\n    return this.instance.get<T, Response<T>>(url, config)\n  }\n\n  head<T>(url: string, config?: AxiosRequestConfig) {\n    return this.instance.get<T, Response<T>>(url, config)\n  }\n\n  delete<T>(url: string, config?: AxiosRequestConfig) {\n    return this.instance.delete<T, Response<T>>(url, config)\n  }\n\n  post<T>(url: string, data?: any, config?: AxiosRequestConfig) {\n    return this.instance.post<T, Response<T>>(url, data, config)\n  }\n\n  put<T>(url: string, data?: any, config?: AxiosRequestConfig) {\n    return this.instance.put<T, Response<T>>(url, data, config)\n  }\n\n  patch<T>(url: string, data?: any, config?: AxiosRequestConfig) {\n    return this.instance.patch<T, Response<T>>(url, data, config)\n  }\n}\n\nexport const http = new HTTPClient()\n","import { HTTPClient } from './httpClient'\n\nexport { http } from './httpClient'\n\nconst gatewayHost = __DEV__ ? 'https://gateway.test.weike.fm' : 'https://gateway-weike.lizhiweike.com'\n\nexport const gatewayRequest = new HTTPClient(\n  { baseURL: gatewayHost },\n  '0000',\n)\n\n// const adminHost = __DEV__ ? 'http://dev.admin.lizhiweike.com' : 'https://admin.lizhiweike.com'\n\nexport default new HTTPClient({\n  // baseURL: `${adminHost}/api`,\n})\n","/*\n * @Description:\n * @Author: ShuaiBi\n * @Date: 2021-05-28 10:06:24\n * @LastEditTime: 2022-06-14 15:00:58\n * @LastEditors:\n */\nimport React, { useState, ChangeEvent } from 'react'\nimport http from '@/core/http'\n// import { useHistory } from 'react-router-dom'\n\nexport default function Index() {\n  const [value, setValue] = useState<string>('')\n  // const history = useHistory()\n  // const aa = () => {\n\n  // }\n  const onget = async() => {\n    const res = await http.get('hello?id=123')\n    console.log(res)\n  }\n\n  const onException = async() => {\n    const res = await http.get(`hello?id=${value}`)\n    console.log(res)\n  }\n\n  console.log('1245')\n\n  return (\n    <div style={{ textAlign: 'center', paddingTop: '10vh' }}>\n      <button onClick={onget}>get</button>\n\n      <br />\n      <input\n        type=\"text\"\n        value={value}\n        onInput={(event: ChangeEvent<HTMLInputElement>) => {\n          const element = (event.target as HTMLInputElement).value\n          setValue(element)\n        }}\n      />\n      <button onClick={onException}>Exception</button>\n    </div>\n  )\n}\n"],"sourceRoot":""}